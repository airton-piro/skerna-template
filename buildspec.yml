version: 0.2

phases:
  install:
    on-failure: ABORT
    commands:
      - apt-get update && apt-get -y install zip jq python3-pip && pip3 install --upgrade awscli && pip3 install poetry
      - poetry install
  pre_build:
    on-failure: ABORT
    commands:
      - echo No prebuild step
  build:
    on-failure: ABORT
    commands:
      - echo Build started on `date`
      - python --version
      - node --version
      - poetry --version
      - yarn --version
      - yarn install
      - poetry run pytest
      - pip install --upgrade --target ./packages/python -r requirements_aws.txt
      - cd packages
      - zip -r packages.zip .
      - cd ..
      - cd skerna_template
      - echo Building ZIP package...
      - zip -r function.zip . -x requirements*.txt
      - cd ..
      - echo Building project dependencies
  post_build:
    on-failure: ABORT
    commands:
      - echo Updating Layer Function...
      - aws --version
      - PUBLISH_DETAIL=$(aws lambda publish-layer-version --layer-name prueba --description "scraper services packages for python" --zip-file fileb://packages/packages.zip --compatible-runtimes python3.9 --compatible-architectures "x86_64")
      - echo $PUBLISH_DETAIL
      - LAYER_VERSION_ARN=$(printf '%s\n' "$PUBLISH_DETAIL" | jq .LayerVersionArn -r)
      - echo Updating lambda Function...
      - aws lambda update-function-code --function-name prueba1 --zip-file fileb://skerna_template/function.zip
      - aws lambda wait function-updated --function-name prueba1
      - aws lambda update-function-configuration --function-name prueba1 --layers $LAYER_VERSION_ARN
      - aws lambda wait function-updated --function-name prueba1
      - echo DONE - Updated lambda Function